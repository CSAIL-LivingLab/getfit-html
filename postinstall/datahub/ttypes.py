#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ConnectionParams:
  """
  Attributes:
   - client_id
   - seq_id
   - user
   - password
   - app_id
   - app_token
   - repo_base
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'client_id', None, None, ), # 1
    (2, TType.STRING, 'seq_id', None, None, ), # 2
    (3, TType.STRING, 'user', None, None, ), # 3
    (4, TType.STRING, 'password', None, None, ), # 4
    (5, TType.STRING, 'app_id', None, None, ), # 5
    (6, TType.STRING, 'app_token', None, None, ), # 6
    (7, TType.STRING, 'repo_base', None, None, ), # 7
  )

  def __init__(self, client_id=None, seq_id=None, user=None, password=None, app_id=None, app_token=None, repo_base=None,):
    self.client_id = client_id
    self.seq_id = seq_id
    self.user = user
    self.password = password
    self.app_id = app_id
    self.app_token = app_token
    self.repo_base = repo_base

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.client_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.seq_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.app_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.app_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.repo_base = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ConnectionParams')
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 1)
      oprot.writeString(self.client_id)
      oprot.writeFieldEnd()
    if self.seq_id is not None:
      oprot.writeFieldBegin('seq_id', TType.STRING, 2)
      oprot.writeString(self.seq_id)
      oprot.writeFieldEnd()
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRING, 3)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 4)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.STRING, 5)
      oprot.writeString(self.app_id)
      oprot.writeFieldEnd()
    if self.app_token is not None:
      oprot.writeFieldBegin('app_token', TType.STRING, 6)
      oprot.writeString(self.app_token)
      oprot.writeFieldEnd()
    if self.repo_base is not None:
      oprot.writeFieldBegin('repo_base', TType.STRING, 7)
      oprot.writeString(self.repo_base)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.client_id)
    value = (value * 31) ^ hash(self.seq_id)
    value = (value * 31) ^ hash(self.user)
    value = (value * 31) ^ hash(self.password)
    value = (value * 31) ^ hash(self.app_id)
    value = (value * 31) ^ hash(self.app_token)
    value = (value * 31) ^ hash(self.repo_base)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Connection:
  """
  Attributes:
   - client_id
   - seq_id
   - user
   - is_app
   - repo_base
   - cursor
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'client_id', None, None, ), # 1
    (2, TType.STRING, 'seq_id', None, None, ), # 2
    (3, TType.STRING, 'user', None, None, ), # 3
    (4, TType.BOOL, 'is_app', None, None, ), # 4
    (5, TType.STRING, 'repo_base', None, None, ), # 5
    (6, TType.I64, 'cursor', None, None, ), # 6
  )

  def __init__(self, client_id=None, seq_id=None, user=None, is_app=None, repo_base=None, cursor=None,):
    self.client_id = client_id
    self.seq_id = seq_id
    self.user = user
    self.is_app = is_app
    self.repo_base = repo_base
    self.cursor = cursor

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.client_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.seq_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.is_app = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.repo_base = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.cursor = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Connection')
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 1)
      oprot.writeString(self.client_id)
      oprot.writeFieldEnd()
    if self.seq_id is not None:
      oprot.writeFieldBegin('seq_id', TType.STRING, 2)
      oprot.writeString(self.seq_id)
      oprot.writeFieldEnd()
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRING, 3)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.is_app is not None:
      oprot.writeFieldBegin('is_app', TType.BOOL, 4)
      oprot.writeBool(self.is_app)
      oprot.writeFieldEnd()
    if self.repo_base is not None:
      oprot.writeFieldBegin('repo_base', TType.STRING, 5)
      oprot.writeString(self.repo_base)
      oprot.writeFieldEnd()
    if self.cursor is not None:
      oprot.writeFieldBegin('cursor', TType.I64, 6)
      oprot.writeI64(self.cursor)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.client_id)
    value = (value * 31) ^ hash(self.seq_id)
    value = (value * 31) ^ hash(self.user)
    value = (value * 31) ^ hash(self.is_app)
    value = (value * 31) ^ hash(self.repo_base)
    value = (value * 31) ^ hash(self.cursor)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Tuple:
  """
  Attributes:
   - cells
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'cells', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, cells=None,):
    self.cells = cells

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.cells = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.cells.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Tuple')
    if self.cells is not None:
      oprot.writeFieldBegin('cells', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.cells))
      for iter6 in self.cells:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cells)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResultSet:
  """
  Attributes:
   - status
   - con
   - num_tuples
   - num_more_tuples
   - tuples
   - field_names
   - field_types
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'status', None, None, ), # 1
    (2, TType.STRUCT, 'con', (Connection, Connection.thrift_spec), None, ), # 2
    (3, TType.I64, 'num_tuples', None, None, ), # 3
    (4, TType.I64, 'num_more_tuples', None, None, ), # 4
    (5, TType.LIST, 'tuples', (TType.STRUCT,(Tuple, Tuple.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'field_names', (TType.STRING,None), None, ), # 6
    (7, TType.LIST, 'field_types', (TType.STRING,None), None, ), # 7
  )

  def __init__(self, status=None, con=None, num_tuples=None, num_more_tuples=None, tuples=None, field_names=None, field_types=None,):
    self.status = status
    self.con = con
    self.num_tuples = num_tuples
    self.num_more_tuples = num_more_tuples
    self.tuples = tuples
    self.field_names = field_names
    self.field_types = field_types

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.status = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.con = Connection()
          self.con.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.num_tuples = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.num_more_tuples = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.tuples = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = Tuple()
            _elem12.read(iprot)
            self.tuples.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.field_names = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = iprot.readString();
            self.field_names.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.field_types = []
          (_etype22, _size19) = iprot.readListBegin()
          for _i23 in xrange(_size19):
            _elem24 = iprot.readString();
            self.field_types.append(_elem24)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResultSet')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.BOOL, 1)
      oprot.writeBool(self.status)
      oprot.writeFieldEnd()
    if self.con is not None:
      oprot.writeFieldBegin('con', TType.STRUCT, 2)
      self.con.write(oprot)
      oprot.writeFieldEnd()
    if self.num_tuples is not None:
      oprot.writeFieldBegin('num_tuples', TType.I64, 3)
      oprot.writeI64(self.num_tuples)
      oprot.writeFieldEnd()
    if self.num_more_tuples is not None:
      oprot.writeFieldBegin('num_more_tuples', TType.I64, 4)
      oprot.writeI64(self.num_more_tuples)
      oprot.writeFieldEnd()
    if self.tuples is not None:
      oprot.writeFieldBegin('tuples', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.tuples))
      for iter25 in self.tuples:
        iter25.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.field_names is not None:
      oprot.writeFieldBegin('field_names', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.field_names))
      for iter26 in self.field_names:
        oprot.writeString(iter26)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.field_types is not None:
      oprot.writeFieldBegin('field_types', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.field_types))
      for iter27 in self.field_types:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.con)
    value = (value * 31) ^ hash(self.num_tuples)
    value = (value * 31) ^ hash(self.num_more_tuples)
    value = (value * 31) ^ hash(self.tuples)
    value = (value * 31) ^ hash(self.field_names)
    value = (value * 31) ^ hash(self.field_types)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DBException(TException):
  """
  Attributes:
   - error_code
   - message
   - details
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error_code', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
    (3, TType.STRING, 'details', None, None, ), # 3
  )

  def __init__(self, error_code=None, message=None, details=None,):
    self.error_code = error_code
    self.message = message
    self.details = details

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.details = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DBException')
    if self.error_code is not None:
      oprot.writeFieldBegin('error_code', TType.I32, 1)
      oprot.writeI32(self.error_code)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.details is not None:
      oprot.writeFieldBegin('details', TType.STRING, 3)
      oprot.writeString(self.details)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error_code)
    value = (value * 31) ^ hash(self.message)
    value = (value * 31) ^ hash(self.details)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
