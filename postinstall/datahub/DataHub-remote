#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from datahub import DataHub
from datahub.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  double get_version()')
  print('  Connection open_connection(ConnectionParams con_params)')
  print('  ResultSet create_repo(Connection con, string repo_name)')
  print('  ResultSet list_repos(Connection con)')
  print('  ResultSet delete_repo(Connection con, string repo_name, bool force_if_non_empty)')
  print('  ResultSet list_tables(Connection con, string repo_name)')
  print('  ResultSet get_schema(Connection con, string table_name)')
  print('  ResultSet execute_sql(Connection con, string query,  query_params)')
  print('  bool close_connection(Connection con)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = DataHub.Client(protocol)
transport.open()

if cmd == 'get_version':
  if len(args) != 0:
    print('get_version requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_version())

elif cmd == 'open_connection':
  if len(args) != 1:
    print('open_connection requires 1 args')
    sys.exit(1)
  pp.pprint(client.open_connection(eval(args[0]),))

elif cmd == 'create_repo':
  if len(args) != 2:
    print('create_repo requires 2 args')
    sys.exit(1)
  pp.pprint(client.create_repo(eval(args[0]),args[1],))

elif cmd == 'list_repos':
  if len(args) != 1:
    print('list_repos requires 1 args')
    sys.exit(1)
  pp.pprint(client.list_repos(eval(args[0]),))

elif cmd == 'delete_repo':
  if len(args) != 3:
    print('delete_repo requires 3 args')
    sys.exit(1)
  pp.pprint(client.delete_repo(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'list_tables':
  if len(args) != 2:
    print('list_tables requires 2 args')
    sys.exit(1)
  pp.pprint(client.list_tables(eval(args[0]),args[1],))

elif cmd == 'get_schema':
  if len(args) != 2:
    print('get_schema requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_schema(eval(args[0]),args[1],))

elif cmd == 'execute_sql':
  if len(args) != 3:
    print('execute_sql requires 3 args')
    sys.exit(1)
  pp.pprint(client.execute_sql(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'close_connection':
  if len(args) != 1:
    print('close_connection requires 1 args')
    sys.exit(1)
  pp.pprint(client.close_connection(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
